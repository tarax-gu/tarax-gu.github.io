import{_ as d,r as t,o as u,m as _,b as n,w as o,p as h,i as p,a as l,e as s}from"./index-ip4ZG4ws.js";const f={},O=e=>(h("data-v-0683d346"),e=e(),p(),e),m={class:"container"},b=O(()=>l("div",{class:"content"},[l("h1",{id:"section2"},"第二章 线性表"),l("h2",{id:"section2.1"},"2.1 线性表的定义和基本操作"),l("h3",{id:"section2.1.1"},"2.1.1 线性表的定义"),l("p",null," 线性表即相同数据类型的n个数据元素的有限序列。 "),l("h2",{id:"section2.2"},"2.2 线性表的顺序表示"),l("h3",{id:"section2.2.1"},"2.2.1 顺序表的定义"),l("ul",null,[s(" 即线性表的顺序存储。优缺点如下： "),l("li",null,"随机访问"),l("li",null,"密度大"),l("li",null,"插入删除复杂"),l("li",null,"需要连续的存储空间")]),l("h3",{id:"section2.2.2"},"2.2.2 顺序表上基本操作"),l("ul",null,[s(" 即线性表的顺序存储。优缺点如下： "),l("li",null,"初始化。O(1)"),l("li",null,"插入。O(n)"),l("li",null,"删除。O(n)"),l("li",null,"查找。按值O(n)，按序号O(1)")]),l("h2",{id:"section2.3"},"2.3 线性表的链式表示"),l("h3",{id:"section2.3.1"},"2.3.1 单链表的定义"),l("p",null," 即线性表的链式存储。每个节点存放自身元素以及后继元素的指针。 "),l("h3",{id:"section2.3.2"},"2.3.2 单链表上的基本操作"),l("ul",null,[l("li",null,"初始化。O(1)"),l("li",null,"求表长。O(n)"),l("li",null,"插入。O(1)"),l("li",null,"删除。O(1)"),l("li",null,"查找。按值按序号O(n)")]),l("h3",{id:"section2.3.3"},"2.3.3 双链表"),l("p",null," 每个节点存放自身元素以及其前驱元素和后继元素的指针。 其操作和单链表类似，只是指针操作更为复杂。 "),l("h3",{id:"section2.3.4"},"2.3.4 循环链表"),l("p",null," 即尾节点的next域指向头节点。分为循环单链表和循环双链表。 循环单链表中，操作无需判断是链表尾，但是尾插的时间复杂度为O(n)。 循环双链表中，头节点的前驱指向尾节点。 "),l("h3",{id:"section2.3.5"},"2.3.5 静态链表"),l("p",null," 用数组来描述线性表的线性存储结构。 "),l("br"),l("br"),l("br"),l("br"),l("br")],-1));function x(e,v){const c=t("el-col"),i=t("el-anchor-link"),a=t("el-anchor"),r=t("el-row");return u(),_("div",m,[n(r,{style:{height:"100%"}},{default:o(()=>[n(c,{span:18},{default:o(()=>[b]),_:1}),n(c,{span:6,style:{}},{default:o(()=>[n(a,null,{default:o(()=>[n(i,{href:"#section1",title:"part1"}),n(i,{href:"#section1.1",title:"part2"}),n(i,{href:"#section1.1.1",title:"part3"})]),_:1})]),_:1})]),_:1})])}const k=d(f,[["render",x],["__scopeId","data-v-0683d346"]]);export{k as default};
