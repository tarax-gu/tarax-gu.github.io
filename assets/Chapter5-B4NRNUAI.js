import{_ as P,r as i,o as d,m as r,b as n,w as o,p as _,i as h,a as l,e}from"./index-DBKJjhjt.js";const p={},T=t=>(_("data-v-42798188"),t=t(),h(),t),C={class:"container"},f=T(()=>l("div",{class:"content"},[l("h1",{id:"section5"},"第五章 传输层"),l("h2",{id:"section5.1"},"5.1传输层的功能"),l("h3",{id:"section5.1.1"},"5.1.1传输层的功能"),l("ul",null,[e("传输层为运行在不同主机的进程之间提供逻辑通信。 "),l("li",null,"应用进程之间的逻辑通信"),l("li",null,"复用和分用"),l("li",null,"差错检测"),l("li",null,"提供面向连接和无连接的传输协议")]),l("h3",{id:"section5.1.2"},"5.1.2 传输层的寻址与端口"),l("ul",null,[l("li",null,"端口的作用。表示主机中的应用进程"),l("li",null,"端口号。端口号长度16比特，分为两类：服务器端使用的端口号以及客户端使用的端口号"),l("li",null,"套接字。在网络中通过Socket进行通信，实际上是一个通信端点。")]),l("h3",{id:"section5.1.3"},"5.1.3 无连接服务与面向连接服务"),l("ul",null,[e("TCP/IP协议族在IP层之上提供了两个传输协议： "),l("li",null,"TCP。提供面向连接的可靠服务,例如SMTP,TEL,HTTP,FTP。"),l("li",null,"UDP。提供无连接的不可靠服务,例如DNS,TFTP,RIP,DHCP,SNMP,IGMP。")]),l("h2",{id:"section5.2"},"5.2 UDP协议"),l("h3",{id:"section5.2.1"},"5.2.1 UDP数据报"),l("p",null," UDP有如下优点：无连接、无连接状态、首部开销小、无拥塞控制、 支持一对一、一对多、多对一、多对多的交互通信。 UDP常用于一次性传输较小数据的网络应用，也适用于多媒体应用。 UDP不保证可靠交付，由应用层完成。 UDP是面向报文的。 "),l("h3",{id:"section5.2.2"},"5.2.2UDP校验"),l("p",null," UDP校验时会加入一个伪首部，将首部和数据部分一起校验。 "),l("h2",{id:"section5.3"},"5.3 TCP协议"),l("h3",{id:"section5.3.1"},"5.3.1 TCP协议的特点"),l("ul",null,[e(" TCP是在不可靠的IP层之上实现的可靠的数据传输协议。 "),l("li",null,"面向连接"),l("li",null,"每个连接只有两个端点，一对一"),l("li",null,"可靠的交付"),l("li",null,"全双工通信"),l("li",null,"面向字节流")]),l("h3",{id:"section5.3.2"},"5.3.2 TCP报文段"),l("p",null," TCP传送的数据单元称为报文段。 报文段即可以用户来建立链接也可以运载数据。 分为首部和数据两部分。首部最短20B。 "),l("h3",{id:"section5.3.3"},"5.3.3 TCP连接管理"),l("p",null," TCP连接采用客户/服务器模式。TCP连接的建立采用3次握手，TCP连接的释放采用4次挥手。 "),l("h3",{id:"section5.3.4"},"5.3.4 TCP可靠传输"),l("ul",null,[e(" TCP通过以下机制来实现可靠传输。 "),l("li",null,"序号"),l("li",null,"确认"),l("li",null,"重传（超时，冗余）")]),l("h3",{id:"section5.3.5"},"5.3.5 TCP流量控制"),l("p",null," 通过滑动窗口来实现流量控制。接收方根据缓存的大小，动态调整接收窗口的大小。 "),l("h3",{id:"section5.3.6"},"5.3.6 TCP拥塞控制"),l("p",null,[e(" TCP进行拥塞控制的方法有4中：慢开始，拥塞避免，快重传和快恢复。 发送方还要维持一个拥塞窗口，其大小取决于网络的拥塞程度。 发送窗口应取拥塞窗口和接受窗口的最小值。 "),l("ul",null,[l("li",null,"慢开始和拥塞避免。即先发送少量数据探测，逐步增加发送窗口（指数增加）。当发送窗口达到一定阈值的时候，采用拥塞避免算法（线性增加）。 网络发生拥塞之后，将阈值设为发送窗口的一半，拥塞窗口设为1，执行慢开始算法。"),l("li",null,"快重传和快恢复。发送方一旦连续收到3个冗余ACK，即立刻重传相应的报文段， 并将阈值调整为当前拥塞窗口的一半")])]),l("br"),l("br"),l("br"),l("br"),l("br")],-1));function D(t,m){const s=i("el-col"),c=i("el-anchor-link"),u=i("el-anchor"),a=i("el-row");return d(),r("div",C,[n(a,{style:{height:"100%"}},{default:o(()=>[n(s,{span:18},{default:o(()=>[f]),_:1}),n(s,{span:6,style:{}},{default:o(()=>[n(u,null,{default:o(()=>[n(c,{href:"#section1",title:"part1"}),n(c,{href:"#section1.1",title:"part2"}),n(c,{href:"#section1.1.1",title:"part3"})]),_:1})]),_:1})]),_:1})])}const U=P(p,[["render",D],["__scopeId","data-v-42798188"]]);export{U as default};
