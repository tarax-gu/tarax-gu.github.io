import{_ as h,r as u,o as a,m as r,b as n,w as e,p as _,i as p,a as l,e as o}from"./index-ip4ZG4ws.js";const C={},P=i=>(_("data-v-87cb7eac"),i=i(),p(),i),U={class:"container"},f=P(()=>l("div",{class:"content"},[l("h1",{id:"section5"},"第五章 中央处理器"),l("h2",{id:"section5.1"},"5.1 CPU的功能和基本结构"),l("h3",{id:"section5.1.1"},"5.1.1 CPU的功能"),l("ul",null,[l("li",null,"指令控制。"),l("li",null,"操作控制。"),l("li",null,"时间控制。"),l("li",null,"数据加工。"),l("li",null,"中断处理。")]),l("h3",{id:"section5.1.2"},"5.1.2 CPU基本结构"),l("ul",null,[l("li",null,"运算器。"),l("li",null,"控制器。")]),l("h3",{id:"section5.1.3"},"5.1.3 CPU的寄存器"),l("ul",null,[l("li",null,"通用寄存器。"),l("li",null,"累加寄存器。"),l("li",null,"移位寄存器。"),l("li",null,"暂存寄存器。"),l("li",null,"程序状态字寄存器。"),l("li",null,"程序计数器。"),l("li",null,"指令寄存器。"),l("li",null,"存储地址寄存器。"),l("li",null,"存储数据寄存器。")]),l("h2",{id:"section5.2"},"5.2 指令执行周期"),l("h3",{id:"section5.2.1"},"5.2.1 指令周期"),l("p",null," CPU取出并执行一条指令所需的全部时间称为指令周期，不同指令的指令周期可能不同。 定长的机器周期为：取值周期+间址周期+执行周期。 不定长的机器周期为：取值周期+执行周期。 "),l("h3",{id:"section5.2.2"},"5.2.2 指令周期的数据流"),l("ul",null,[l("li",null,"取指周期。PC->MAR->存储器;CU->存储器;主存->MDR->IR;CU->PC+1。"),l("li",null,"间址周期。IR->MAR->存储器;CU->存储器;主存->MDR。"),l("li",null,"执行周期。"),l("li",null,"中断周期。SP-1(栈顶指针)->MAR->存储器;CU->存储器;PC->MDR->主存;CU->PC。")]),l("h3",{id:"section5.2.3"},"5.2.3 指令执行方案"),l("ul",null,[l("li",null,"单周期处理器。"),l("li",null,"多周期处理器。"),l("li",null,"流水线处理器。")]),l("h2",{id:"section5.3"},"5.3 数据通路的功能和基本结构"),l("h3",{id:"section5.3.1"},"5.3.1 数据通路的功能"),l("p",null," CPU可视为数据通路和控制部件两大部分组成。 "),l("h3",{id:"section5.3.2"},"5.3.2 数据通路的组成"),l("ul",null,[o(" 主要分为组合逻辑元件和时序逻辑元件。 "),l("li",null,"组合逻辑元件(操作元件)。加法器、算术逻辑单元、译码器、多路选择器、三态门。"),l("li",null,"时序逻辑元件(状态元件)。通用寄存器组、程序计数器。")]),l("h3",{id:"section5.3.3"},"5.3.3 数据通路的基本结构"),l("ul",null,[l("li",null,"CPU内部单总线方式。"),l("li",null,"CPU内部多总线方式。"),l("li",null,"专用数据通路方式。")]),l("h2",{id:"section5.4"},"5.4 控制器的功能和工作原理"),l("h3",{id:"section5.4.1"},"5.4.1 控制器的结构和功能"),l("p",null," 控制器是计算机系统的指挥中心，控制器的主要功能有: 从主存中取指令，并指出下一条指令在主存中的位置， 指令译码，控制CPU。 "),l("h3",{id:"section5.4.2"},"5.4.2 硬布线控制器"),l("p",null," 由复杂的组合逻辑门电路和触发器构成，也称组合逻辑控制器。 "),l("h3",{id:"section5.4.3"},"5.4.3 微程序控制器"),l("ul",null,[o(" 微程序控制器采用存储逻辑实现。 "),l("li",null,"微命令和微操作。"),l("li",null,"微指令和微周期。"),l("li",null,"主存储器和控制存储器。"),l("li",null,"程序和微程序。"),l("li",null,"微程序控制器的组成和工作过程。"),l("li",null,"微指令的编码方式。直接编码、字段直接编码"),l("li",null,"微指令的地址形成方式。"),l("li",null,"微指令的格式。水平型、垂直型。")]),l("h2",{id:"section5.5"},"5.5 异常和中断机制"),l("h3",{id:"section5.5.1"},"5.5.1 异常和中断的基本概念"),l("p",null," CPU内部产生的意外事件叫异常，外部的中断请求叫中断。 "),l("h3",{id:"section5.5.2"},"5.5.2 异常和中断的分类"),l("ul",null,[o("。 "),l("li",null,"异常的分类。故障、自陷、终止。"),l("li",null,"中断的分类。可屏蔽中断和不可屏蔽中断。")]),l("h3",{id:"section5.5.3"},"5.5.3 异常和中断的响应过程"),l("ul",null,[l("li",null,"关中断。"),l("li",null,"保存断点和程序状态。"),l("li",null,"识别异常和中断并转到相应的处理程序。")]),l("h2",{id:"section5.6"},"5.6 指令流水线"),l("h3",{id:"section5.6.1"},"5.6.1 指令流水线的概念"),l("p",null," 可从两方面提高处理机的并行性：时间上的并行技术（流水线），空间上的并行技术（超标量处理机）。 一个指令的执行过程可以分解成若干阶段，每个阶段由相应的功能部件完成。 将各阶段视为相应的流水线，则指令的执行过程就构成了一条指令流水线。 为了实现指令流水线，指令集应具有如下特征：指令长度尽量一致，格式尽量规整，采用访存指令，按边界存放。 "),l("h3",{id:"section5.6.2"},"5.6.2 流水线的基本实现"),l("ul",null,[l("li",null,"流水线设计的原则。以执行速度最慢的指令作为其时钟周期的依据。"),l("li",null,"流水线的逻辑结构。每个流水段后面增加一个流水段寄存器锁存处理过的数据"),l("li",null,"流水线的时空图表示。")]),l("h3",{id:"section5.6.3"},"5.6.3 流水线的冒险与处理"),l("ul",null,[l("li",null,"结构冒险。停顿或者设置多个独立的部件。"),l("li",null,"数据冒险。延迟执行、旁路转发、编译优化。"),l("li",null,"竞争冒险。延迟，分支预测。")]),l("h3",{id:"section5.6.4"},"5.6.4 流水线的性能指标"),l("ul",null,[l("li",null,"吞吐率。"),l("li",null,"加速比。")]),l("h3",{id:"section5.6.5"},"5.6.5 高级流水线技术"),l("ul",null,[l("li",null,"超标量流水线技术。"),l("li",null,"超长指令字技术。"),l("li",null,"超流水线技术。")]),l("h2",{id:"section5.7"},"5.7 多处理器的基本概念"),l("h3",{id:"section5.7.1"},"5.7.1 SISD、SIMD、MIMD的基本概念"),l("ul",null,[l("li",null,"SIS，单指令流单数据流"),l("li",null,"SIMD，单指令流多数据流。"),l("li",null,"MISD，多指令集单数据流（实际上不存在这种计算机）。"),l("li",null,"MIMD，多指令集多数据流。")]),l("h3",{id:"section5.7.2"},"5.7.2 硬件多线程的基本概念"),l("ul",null,[l("li",null,"细粒度多线程。"),l("li",null,"粗粒度多线程。"),l("li",null,"同时多线程。")]),l("h3",{id:"section5.7.3"},"5.7.3 多核处理器的基本概念"),l("p",null," 多个处理单元集成到一个CPU上，每个处理单元称为一个核，物理上并行多线程。 "),l("h3",{id:"section5.7.4"},"5.7.4 共享内存多处理机"),l("ul",null,[l("li",null,"统一存储访问。"),l("li",null,"非统一存储访问。")]),l("br"),l("br"),l("br"),l("br"),l("br")],-1));function I(i,M){const c=u("el-col"),t=u("el-anchor-link"),s=u("el-anchor"),d=u("el-row");return a(),r("div",U,[n(d,{style:{height:"100%"}},{default:e(()=>[n(c,{span:18},{default:e(()=>[f]),_:1}),n(c,{span:6,style:{}},{default:e(()=>[n(s,null,{default:e(()=>[n(t,{href:"#section1",title:"part1"}),n(t,{href:"#section1.1",title:"part2"}),n(t,{href:"#section1.1.1",title:"part3"})]),_:1})]),_:1})]),_:1})])}const m=h(C,[["render",I],["__scopeId","data-v-87cb7eac"]]);export{m as default};
