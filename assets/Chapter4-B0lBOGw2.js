import{_ as a,r as e,o as d,m as r,b as n,w as t,p as h,i as _,a as l,e as p}from"./index-DBKJjhjt.js";const m={},f=i=>(h("data-v-25461398"),i=i(),_(),i),S={class:"container"},C=f(()=>l("div",{class:"content"},[l("h1",{id:"section4"},"第四章 指令系统"),l("h2",{id:"section4.1"},"4.1 指令系统"),l("h3",{id:"section4.1.1"},"4.1.1 指令集体系结构"),l("p",null," 机器指令是指计算机执行某种操作的命令。指令系统是指令集体系结构(ISA)中最核心的部分。 ISA规定的内容主要包括:指令格式、操作数的类型、寄存器编号、控制方式。 "),l("h3",{id:"section4.1.2"},"4.1.2 指令的基本格式"),l("ul",null,[p(" 操作码+地址码。 "),l("li",null,"零地址指令。"),l("li",null,"一地址指令。"),l("li",null,"二地址指令。"),l("li",null,"三地址指令。"),l("li",null,"四地址指令。")]),l("h3",{id:"section4.1.3"},"4.1.3 定长操作码指令格式"),l("p",null," 在指令字的最高位部分分配定长表示操作码。 "),l("h3",{id:"section4.1.4"},"4.1.4 扩展操作码指令格式"),l("p",null," 根据地址位的不同可以进位操作码扩展，注意短码不能是长码的前缀，操作码不能相同。 "),l("h3",{id:"section4.1.5"},"4.1.5 指令的操作类型"),l("ul",null,[l("li",null,"数据传送。"),l("li",null,"算数和逻辑运算。"),l("li",null,"移位操作。"),l("li",null,"转移操作。"),l("li",null,"输入输出操作。")]),l("h2",{id:"section4.2"},"4.2 指令的寻址方式"),l("h3",{id:"section4.2.1"},"4.2.1 指令寻址和数据寻址"),l("p",null," 指令寻址有两种：顺序寻址(通过PC+1形成地址)，跳跃寻址(通过转移类指令，绝对转移或者相对转移)。 数据寻址：在指令中计算出操作数的地址。 "),l("h3",{id:"section4.2.2"},"4.2.2 常见的数据寻址方式"),l("ul",null,[l("li",null,"隐含寻址。"),l("li",null,"立即数寻址。"),l("li",null,"直接寻址。"),l("li",null,"间接寻址。"),l("li",null,"寄存器寻址。"),l("li",null,"寄存器间接寻址。"),l("li",null,"相对寻址。"),l("li",null,"基址寻址。"),l("li",null,"变址寻址。"),l("li",null,"堆栈寻址。")]),l("h2",{id:"section4.3"},"4.3 程序的机器级代码表示"),l("h3",{id:"section4.3.1"},"4.3.1 常用汇编指令介绍"),l("ul",null,[l("li",null,"相关寄存器。"),l("li",null,"汇编指令格式。"),l("li",null,"常用指令。mov,push,pop,add/sub,inc/dec,imul,idiv,and/or/xor,not,shl/shr,jmp,cmp/test,call/ret.")]),l("h2",{id:"section4.4"},"4.4 CISC和RISC的基本概念"),l("h3",{id:"section4.4.1"},"4.4.1 复杂指令系统计算机(SISC)"),l("ul",null,[l("li",null,"指令系统复杂庞大。"),l("li",null,"指令长度不固定。"),l("li",null,"访存指令不受限。"),l("li",null,"各指令使用频度相差大。"),l("li",null,"各指令执行周期相差大。"),l("li",null,"采用微程序控制。"),l("li",null,"难以用编译优化。")]),l("h3",{id:"section4.4.2"},"4.4.2 精简指令系统计算机(RISC)"),l("ul",null,[l("li",null,"选取简单指令，复杂指令由简单指令组合来实现。"),l("li",null,"指令长度固定，指令格式种类少，寻址方式种类少。"),l("li",null,"只有LOAD/STORE指令访存。"),l("li",null,"CPU中通用寄存器数量多。"),l("li",null,"采用指令流水线，大部分指令在一个时钟周期内完成。"),l("li",null,"以硬布线控制为主，不用或少用微程序控制。"),l("li",null,"重视编译优化工作。")]),l("br"),l("br"),l("br"),l("br"),l("br")],-1));function I(i,b){const u=e("el-col"),o=e("el-anchor-link"),c=e("el-anchor"),s=e("el-row");return d(),r("div",S,[n(s,{style:{height:"100%"}},{default:t(()=>[n(u,{span:18},{default:t(()=>[C]),_:1}),n(u,{span:6,style:{}},{default:t(()=>[n(c,null,{default:t(()=>[n(o,{href:"#section1",title:"part1"}),n(o,{href:"#section1.1",title:"part2"}),n(o,{href:"#section1.1.1",title:"part3"})]),_:1})]),_:1})]),_:1})])}const x=a(m,[["render",I],["__scopeId","data-v-25461398"]]);export{x as default};
